; ModuleID = 'MiniC'
source_filename = "MiniC"

@n = private global i32 0
@arr = private global [100 x i32] zeroinitializer
@0 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@1 = private unnamed_addr constant [4 x i8] c" | \00", align 1
@2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

declare i32 @printf(i8*, ...)

declare i32 @scanf(i8*, ...)

define void @swap(i32 %l, i32 %r) {
entry:
  %l1 = alloca i32, align 4
  store i32 %l, i32* %l1, align 4
  %r2 = alloca i32, align 4
  store i32 %r, i32* %r2, align 4
  %0 = load i32, i32* %l1, align 4
  %"arr$" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %0
  %1 = load i32, i32* %"arr$", align 4
  %temp = alloca i32, align 4
  store i32 %1, i32* %temp, align 4
  %2 = load i32, i32* %r2, align 4
  %"arr$3" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %2
  %3 = load i32, i32* %"arr$3", align 4
  %4 = load i32, i32* %l1, align 4
  %"arr$4" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %4
  store i32 %3, i32* %"arr$4", align 4
  %5 = load i32, i32* %temp, align 4
  %6 = load i32, i32* %r2, align 4
  %"arr$5" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %6
  store i32 %5, i32* %"arr$5", align 4
  ret void
}

define void @combinations(i32 %idx) {
entry:
  %idx1 = alloca i32, align 4
  store i32 %idx, i32* %idx1, align 4
  %0 = load i32, i32* %idx1, align 4
  %1 = load i32, i32* @n, align 4
  %ge = icmp sge i32 %0, %1
  br i1 %ge, label %then, label %ifcont

then:                                             ; preds = %entry
  %i = alloca i32, align 4
  store i32 1, i32* %i, align 4
  br label %loopcond

loopcond:                                         ; preds = %loopbody, %then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* @n, align 4
  %le = icmp sle i32 %2, %3
  br i1 %le, label %loopbody, label %outer

loopbody:                                         ; preds = %loopcond
  %4 = load i32, i32* %i, align 4
  %sub = sub i32 %4, 1
  %"arr$" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %sub
  %5 = load i32, i32* %"arr$", align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 %5)
  %6 = load i32, i32* %i, align 4
  %add = add i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %loopcond

outer:                                            ; preds = %loopcond
  %printf2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0))
  br label %ifcont

ifcont:                                           ; preds = %outer, %entry
  %7 = load i32, i32* %idx1, align 4
  %i3 = alloca i32, align 4
  store i32 %7, i32* %i3, align 4
  br label %loopcond4

loopcond4:                                        ; preds = %loopbody5, %ifcont
  %8 = load i32, i32* %i3, align 4
  %9 = load i32, i32* @n, align 4
  %lt = icmp slt i32 %8, %9
  br i1 %lt, label %loopbody5, label %outer8

loopbody5:                                        ; preds = %loopcond4
  %10 = load i32, i32* %idx1, align 4
  %11 = load i32, i32* %i3, align 4
  call void @swap(i32 %10, i32 %11)
  %12 = load i32, i32* %idx1, align 4
  %add6 = add i32 %12, 1
  call void @combinations(i32 %add6)
  %13 = load i32, i32* %idx1, align 4
  %14 = load i32, i32* %i3, align 4
  call void @swap(i32 %13, i32 %14)
  %15 = load i32, i32* %i3, align 4
  %add7 = add i32 %15, 1
  store i32 %add7, i32* %i3, align 4
  br label %loopcond4

outer8:                                           ; preds = %loopcond4
  ret void
}

define i32 @main() {
entry:
  %scanf = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i32* @n)
  %i = alloca i32, align 4
  store i32 1, i32* %i, align 4
  br label %loopcond

loopcond:                                         ; preds = %loopbody, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @n, align 4
  %le = icmp sle i32 %0, %1
  br i1 %le, label %loopbody, label %outer

loopbody:                                         ; preds = %loopcond
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %i, align 4
  %sub = sub i32 %3, 1
  %"arr$" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %sub
  store i32 %2, i32* %"arr$", align 4
  %4 = load i32, i32* %i, align 4
  %add = add i32 %4, 1
  store i32 %add, i32* %i, align 4
  br label %loopcond

outer:                                            ; preds = %loopcond
  call void @combinations(i32 0)
  ret i32 0
}
