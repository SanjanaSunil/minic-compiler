; ModuleID = 'MiniC'
source_filename = "MiniC"

@arr = private global [100 x i32] zeroinitializer
@0 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1

declare i32 @printf(i8*, ...)

declare i32 @scanf(i8*, ...)

define void @merge(i32 %l, i32 %mid, i32 %r) {
entry:
  %l1 = alloca i32, align 4
  store i32 %l, i32* %l1, align 4
  %mid2 = alloca i32, align 4
  store i32 %mid, i32* %mid2, align 4
  %r3 = alloca i32, align 4
  store i32 %r, i32* %r3, align 4
  %0 = load i32, i32* %r3, align 4
  %1 = load i32, i32* %l1, align 4
  %sub = sub i32 %0, %1
  %add = add i32 %sub, 1
  %output = alloca i32, i32 %add, align 4
  %2 = load i32, i32* %l1, align 4
  %p1 = alloca i32, align 4
  store i32 %2, i32* %p1, align 4
  %3 = load i32, i32* %mid2, align 4
  %add4 = add i32 %3, 1
  %p2 = alloca i32, align 4
  store i32 %add4, i32* %p2, align 4
  %ptr = alloca i32, align 4
  store i32 0, i32* %ptr, align 4
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %entry
  %4 = load i32, i32* %p1, align 4
  %5 = load i32, i32* %mid2, align 4
  %le = icmp sle i32 %4, %5
  %6 = load i32, i32* %p2, align 4
  %7 = load i32, i32* %r3, align 4
  %le5 = icmp sle i32 %6, %7
  %and = and i1 %le, %le5
  br i1 %and, label %loopbody, label %outer

loopbody:                                         ; preds = %loopcond
  %8 = load i32, i32* %p1, align 4
  %"arr$" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %8
  %9 = load i32, i32* %"arr$", align 4
  %10 = load i32, i32* %p2, align 4
  %"arr$6" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %10
  %11 = load i32, i32* %"arr$6", align 4
  %lt = icmp slt i32 %9, %11
  br i1 %lt, label %then, label %else

then:                                             ; preds = %loopbody
  %12 = load i32, i32* %p1, align 4
  %"arr$7" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %12
  %13 = load i32, i32* %"arr$7", align 4
  %14 = load i32, i32* %ptr, align 4
  %"output$" = getelementptr inbounds i32, i32* %output, i32 %14
  store i32 %13, i32* %"output$", align 4
  %15 = load i32, i32* %p1, align 4
  %add8 = add i32 %15, 1
  store i32 %add8, i32* %p1, align 4
  br label %ifcont

else:                                             ; preds = %loopbody
  %16 = load i32, i32* %p2, align 4
  %"arr$9" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %16
  %17 = load i32, i32* %"arr$9", align 4
  %18 = load i32, i32* %ptr, align 4
  %"output$10" = getelementptr inbounds i32, i32* %output, i32 %18
  store i32 %17, i32* %"output$10", align 4
  %19 = load i32, i32* %p2, align 4
  %add11 = add i32 %19, 1
  store i32 %add11, i32* %p2, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %20 = load i32, i32* %ptr, align 4
  %add12 = add i32 %20, 1
  store i32 %add12, i32* %ptr, align 4
  br label %loopcond

outer:                                            ; preds = %loopcond
  br label %loopcond13

loopcond13:                                       ; preds = %loopbody15, %outer
  %21 = load i32, i32* %p1, align 4
  %22 = load i32, i32* %mid2, align 4
  %le14 = icmp sle i32 %21, %22
  br i1 %le14, label %loopbody15, label %outer20

loopbody15:                                       ; preds = %loopcond13
  %23 = load i32, i32* %p1, align 4
  %"arr$16" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %23
  %24 = load i32, i32* %"arr$16", align 4
  %25 = load i32, i32* %ptr, align 4
  %"output$17" = getelementptr inbounds i32, i32* %output, i32 %25
  store i32 %24, i32* %"output$17", align 4
  %26 = load i32, i32* %ptr, align 4
  %add18 = add i32 %26, 1
  store i32 %add18, i32* %ptr, align 4
  %27 = load i32, i32* %p1, align 4
  %add19 = add i32 %27, 1
  store i32 %add19, i32* %p1, align 4
  br label %loopcond13

outer20:                                          ; preds = %loopcond13
  br label %loopcond21

loopcond21:                                       ; preds = %loopbody23, %outer20
  %28 = load i32, i32* %p2, align 4
  %29 = load i32, i32* %r3, align 4
  %le22 = icmp sle i32 %28, %29
  br i1 %le22, label %loopbody23, label %outer28

loopbody23:                                       ; preds = %loopcond21
  %30 = load i32, i32* %p2, align 4
  %"arr$24" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %30
  %31 = load i32, i32* %"arr$24", align 4
  %32 = load i32, i32* %ptr, align 4
  %"output$25" = getelementptr inbounds i32, i32* %output, i32 %32
  store i32 %31, i32* %"output$25", align 4
  %33 = load i32, i32* %ptr, align 4
  %add26 = add i32 %33, 1
  store i32 %add26, i32* %ptr, align 4
  %34 = load i32, i32* %p2, align 4
  %add27 = add i32 %34, 1
  store i32 %add27, i32* %p2, align 4
  br label %loopcond21

outer28:                                          ; preds = %loopcond21
  %35 = load i32, i32* %l1, align 4
  %i = alloca i32, align 4
  store i32 %35, i32* %i, align 4
  br label %loopcond29

loopcond29:                                       ; preds = %loopbody31, %outer28
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %r3, align 4
  %le30 = icmp sle i32 %36, %37
  br i1 %le30, label %loopbody31, label %outer36

loopbody31:                                       ; preds = %loopcond29
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %l1, align 4
  %sub32 = sub i32 %38, %39
  %"output$33" = getelementptr inbounds i32, i32* %output, i32 %sub32
  %40 = load i32, i32* %"output$33", align 4
  %41 = load i32, i32* %i, align 4
  %"arr$34" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %41
  store i32 %40, i32* %"arr$34", align 4
  %42 = load i32, i32* %i, align 4
  %add35 = add i32 %42, 1
  store i32 %add35, i32* %i, align 4
  br label %loopcond29

outer36:                                          ; preds = %loopcond29
  ret void
}

define void @sort(i32 %l, i32 %r) {
entry:
  %l1 = alloca i32, align 4
  store i32 %l, i32* %l1, align 4
  %r2 = alloca i32, align 4
  store i32 %r, i32* %r2, align 4
  %0 = load i32, i32* %l1, align 4
  %1 = load i32, i32* %r2, align 4
  %ge = icmp sge i32 %0, %1
  br i1 %ge, label %then, label %ifcont

then:                                             ; preds = %entry
  ret void

ifcont:                                           ; preds = %entry
  %2 = load i32, i32* %l1, align 4
  %3 = load i32, i32* %r2, align 4
  %add = add i32 %2, %3
  %div = sdiv i32 %add, 2
  %mid = alloca i32, align 4
  store i32 %div, i32* %mid, align 4
  %4 = load i32, i32* %l1, align 4
  %5 = load i32, i32* %mid, align 4
  call void @sort(i32 %4, i32 %5)
  %6 = load i32, i32* %mid, align 4
  %add3 = add i32 %6, 1
  %7 = load i32, i32* %r2, align 4
  call void @sort(i32 %add3, i32 %7)
  %8 = load i32, i32* %l1, align 4
  %9 = load i32, i32* %mid, align 4
  %10 = load i32, i32* %r2, align 4
  call void @merge(i32 %8, i32 %9, i32 %10)
  ret void
}

define i32 @main() {
entry:
  %n = alloca i32, align 4
  %scanf = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0), i32* %n)
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %loopcond

loopcond:                                         ; preds = %loopbody, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n, align 4
  %lt = icmp slt i32 %0, %1
  br i1 %lt, label %loopbody, label %outer

loopbody:                                         ; preds = %loopcond
  %2 = load i32, i32* %i, align 4
  %"arr$" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %2
  %scanf1 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0), i32* %"arr$")
  %3 = load i32, i32* %i, align 4
  %add = add i32 %3, 1
  store i32 %add, i32* %i, align 4
  br label %loopcond

outer:                                            ; preds = %loopcond
  %4 = load i32, i32* %n, align 4
  %sub = sub i32 %4, 1
  call void @sort(i32 0, i32 %sub)
  %i2 = alloca i32, align 4
  store i32 0, i32* %i2, align 4
  br label %loopcond3

loopcond3:                                        ; preds = %loopbody5, %outer
  %5 = load i32, i32* %i2, align 4
  %6 = load i32, i32* %n, align 4
  %lt4 = icmp slt i32 %5, %6
  br i1 %lt4, label %loopbody5, label %outer8

loopbody5:                                        ; preds = %loopcond3
  %7 = load i32, i32* %i2, align 4
  %"arr$6" = getelementptr inbounds [100 x i32], [100 x i32]* @arr, i32 0, i32 %7
  %8 = load i32, i32* %"arr$6", align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), i32 %8)
  %9 = load i32, i32* %i2, align 4
  %add7 = add i32 %9, 1
  store i32 %add7, i32* %i2, align 4
  br label %loopcond3

outer8:                                           ; preds = %loopcond3
  ret i32 0
}
